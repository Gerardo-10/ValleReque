from src.models.entities.Empleado import Empleado


class ModelEmpleado:
    @classmethod
    def get_by_empleado_id(cls, db, id_empleado):
        cursor = db.connection.cursor()
        query = """
                SELECT id_empleado,
                       nombre_empleado,
                       apellido_empleado,
                       dni,
                       direccion,
                       telefono,
                       correo_electronico,
                       fecha_nacimiento
                FROM empleado
                WHERE id_empleado = %s
                """
        cursor.execute(query, (id_empleado,))
        row = cursor.fetchone()
        cursor.close()

        if row:
            return Empleado(*row)
        else:
            return None

    @classmethod
    def get_all(cls, db):
        try:
            cursor = db.connection.cursor()
            cursor.execute("CALL sp_empleados_todos()")
            rows = cursor.fetchall()

            # Limpiar cualquier conjunto de resultados restante
            while cursor.nextset():
                pass

            # Crear lista de objetos Empleado
            empleados = [Empleado(*row) for row in rows]

            cursor.close()  # Cerrar el cursor al finalizar
            return empleados

        except Exception as ex:
            print(f"[ERROR get_all Empleado]: {ex}")
            import traceback
            traceback.print_exc()
            return []


    @staticmethod
    def insert(db, empleado, id_area):
        try:
            cursor = db.connection.cursor()
            query = """
                    INSERT INTO empleado (nombre_empleado, \
                                          apellido_empleado, \
                                          dni, \
                                          direccion, \
                                          telefono, \
                                          correo_electronico, \
                                          fecha_nacimiento, \
                                          id_area) \
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s) \
                    """
            cursor.execute(query, (
                empleado.nombre,
                empleado.apellido,
                empleado.dni,
                empleado.direccion,
                empleado.telefono,
                empleado.correo,
                empleado.fecha_nacimiento,
                id_area
            ))
            db.connection.commit()
            cursor.close()
            return True
        except Exception as ex:
            print(f"Error en insert: {ex}")
            return False


    @staticmethod
    def update(db, empleado, id_area):
        try:
            cursor = db.connection.cursor()
            query = """
                    UPDATE empleado
                    SET nombre_empleado    = %s,
                        apellido_empleado  = %s,
                        dni                = %s,
                        direccion          = %s,
                        telefono           = %s,
                        correo_electronico = %s,
                        fecha_nacimiento   = %s,
                        id_area            = %s
                    WHERE id_empleado = %s \
                    """
            cursor.execute(query, (
                empleado.nombre,
                empleado.apellido,
                empleado.dni,
                empleado.direccion,
                empleado.telefono,
                empleado.correo,
                empleado.fecha_nacimiento,
                id_area,
                empleado.id_empleado
            ))
            db.connection.commit()
            cursor.close()
            return True
        except Exception as ex:
            print(f"Error en update: {ex}")
            return False


    @staticmethod
    def delete(db, id_empleado):
        try:
            cursor = db.connection.cursor()
            query = "DELETE FROM empleado WHERE id_empleado = %s"
            cursor.execute(query, (id_empleado,))
            db.connection.commit()
            cursor.close()
            return True
        except Exception as ex:
            print(f"Error en delete: {ex}")
            return False
