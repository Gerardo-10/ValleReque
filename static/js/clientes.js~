window.initClientesModals = function () {
    // Referencias a elementos del DOM
    const btnCambiarEstado = document.getElementById('btnCambiarEstado');
    const btnAgregar = document.getElementById('btnAgregar');
    const modalCambiarEstado = document.getElementById('modalCambiarEstado');
    const modalAgregarCliente = document.getElementById('modalAgregarCliente');
    const modalExito = document.getElementById('modalExito');
    const modalOverlay = document.getElementById('modalOverlay');
    const cerrarModalEstado = document.getElementById('cerrarModalEstado');
    const cerrarModalAgregar = document.getElementById('cerrarModalAgregar');
    const cerrarModalExito = document.getElementById('cerrarModalExito');
    const btnCancelarAgregar = document.getElementById('btnCancelarAgregar');
    const btnConfirmarEstado = document.getElementById('btnConfirmarEstado');
    const formAgregarCliente = document.getElementById('formAgregarCliente');
    const opcionesEstado = document.querySelectorAll('.opcion-estado');
    const checkboxSeleccionarTodos = document.getElementById('seleccionarTodos');
    const btnEliminar = document.getElementById('btnEliminar');
    const modalEliminarCliente = document.getElementById('modalConfirmarEliminacion');
    const btnCancelarEliminar = document.getElementById('btnCancelarEliminar');
    const btnConfirmarEliminar = document.getElementById('btnConfirmarEliminar');

    // Variables de estado
    let estadoSeleccionado = null;

    // Funciones auxiliares
    function abrirModal(modal) {
        modal.classList.add('activo');
        modalOverlay.classList.add('activo');
        document.body.style.overflow = 'hidden';
    }

    function cerrarModal(modal) {
        modal.classList.remove('activo');
        modalOverlay.classList.remove('activo');
        document.body.style.overflow = '';
    }

    function cerrarTodosLosModales() {
        document.querySelectorAll('.modal').forEach(modal => modal.classList.remove('activo'));
        modalOverlay.classList.remove('activo');
        document.body.style.overflow = '';
    }

    function mostrarExito(titulo, mensaje) {
        document.getElementById('tituloExito').textContent = titulo;
        document.getElementById('mensajeExito').textContent = mensaje;
        abrirModal(modalExito);
    }

    function obtenerClientesSeleccionados() {
        return [...document.querySelectorAll('.checkbox-cliente:checked')].map(cb => cb.dataset.id);
    }

    function actualizarClientesSeleccionados() {
        const seleccionados = obtenerClientesSeleccionados();
        btnCambiarEstado.disabled = seleccionados.length === 0;
        btnCambiarEstado.style.opacity = seleccionados.length === 0 ? '0.6' : '1';
    }

    // Eventos
    document.addEventListener('change', function (e) {
        if (e.target.classList.contains('checkbox-cliente')) {
            actualizarClientesSeleccionados();
        }
    });

    opcionesEstado.forEach(opcion => {
        opcion.addEventListener('click', function () {
            opcionesEstado.forEach(op => op.classList.remove('seleccionado'));
            this.classList.add('seleccionado');
            estadoSeleccionado = this.dataset.estado;
        });
    });

    formAgregarTerreno.addEventListener('submit', function (e) {
        e.preventDefault();
        const formData = new FormData(this);

        fetch(this.action, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRFToken': document.querySelector('input[name=csrf_token]').value
            }
        })
            .then(async res => {
                if (!res.ok) {
                    const errorText = await res.text();
                    throw new Error(`Error HTTP ${res.status}: ${errorText}`);
                }
                return res.json();
            })
            .then(data => {
                if (data.success) {
                    const terreno = data.terreno;

                    const nuevaFila = document.createElement('tr');
                    nuevaFila.setAttribute('data-id', terreno.id_empleado || '');
                    nuevaFila.setAttribute('data-estado', (terreno.estado || 'Disponible').toLowerCase());
                    nuevaFila.innerHTML = `
                <td>${terreno.id_terreno}</td>
                <td>${terreno.nombre_proyecto}</td>
                <td>${terreno.etapa}</td>
                <td>${terreno.unidad}</td>
                <td>${terreno.area}</td>
                <td>${terreno.precio}</td>
                <td>${terreno.tipo}</td>
                <td>${terreno.estado || 'Disponible'}</td>
                <td class="acciones">
                    <button class="btn-editar-terreno" data-id="${terreno.id_terreno}">Editar</button>
                    <button class="btn-eliminar-terreno" data-id="${terreno.id_terreno}">Eliminar</button>
                </td>
            `;

                    document.getElementById('tabla_terrenos_body').appendChild(nuevaFila);

                    cerrarModal(modalGuardar); // Cierra el modal
                    mostrarExito('Terreno agregado', data.message); // Muestra modal de éxito
                    this.reset(); // Limpia el formulario

                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error al enviar formulario:', error);
                alert('Error inesperado al enviar el formulario: ' + error.message);
            });
    });


    btnEliminar.addEventListener('click', () => {
        if (obtenerClientesSeleccionados().length === 0) {
            alert('Por favor, seleccione al menos un cliente');
            return;
        }
        abrirModal(modalEliminarCliente);
    });

    btnCancelarEliminar.addEventListener('click', () => cerrarModal(modalEliminarCliente));

    btnConfirmarEliminar.addEventListener('click', () => {
        const clientesSeleccionados = obtenerClientesSeleccionados();
        if (clientesSeleccionados.length === 0) {
            alert('No hay clientes seleccionados');
            return;
        }

        const formData = new FormData();
        formData.append('clientes', JSON.stringify(clientesSeleccionados));

        fetch('/eliminar_clientes', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRFToken': document.querySelector('input[name=csrf_token]').value
            }
        })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    clientesSeleccionados.forEach(id => {
                        const fila = document.querySelector(`tr[data-id="${id}"]`);
                        if (fila) fila.remove();
                    });
                    cerrarModal(modalEliminarCliente);
                    mostrarExito('Clientes eliminados', data.message);
                    actualizarClientesSeleccionados();
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error al eliminar clientes:', error);
                alert('Error inesperado al eliminar clientes');
            });
    });

    btnConfirmarEstado.addEventListener('click', function () {
        const clientesSeleccionados = obtenerClientesSeleccionados();

        // Verificar que se ha seleccionado un estado
        if (!estadoSeleccionado) {
            alert('Por favor, seleccione un estado');
            return;
        }

        // Verificar que se ha seleccionado al menos un cliente
        if (clientesSeleccionados.length === 0) {
            alert('Por favor, seleccione al menos un cliente');
            return;
        }

        // Crear el formulario con los datos
        const formData = new FormData();
        formData.append('clientes', JSON.stringify(clientesSeleccionados));  // Convertir lista de clientes a JSON
        formData.append('estado', estadoSeleccionado);  // Agregar el estado seleccionado

        // Enviar la solicitud al backend
        fetch('/actualizar_estado_clientes', {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRFToken': document.querySelector('input[name=csrf_token]').value  // CSRF token
            }
        })
            .then(res => res.json())
            .then(data => {
                if (data.success) {
                    // Actualizar el estado visualmente en la interfaz de usuario
                    clientesSeleccionados.forEach(id => {
                        const fila = document.querySelector(`tr[data-id="${id}"]`);
                        if (fila) {
                            const spanEstado = fila.querySelector('.estado-badge');
                            const clasesEstado = {
                                'activo': 'activo',
                                'evaluado': 'evaluado',
                                'no-disponible': 'no-disponible',
                                'sin-evaluar': 'sin-evaluar'
                            };

                            // Actualizar el estado visualmente
                            spanEstado.className = 'estado-badge ' + (clasesEstado[estadoSeleccionado] || 'sin-evaluar');
                            spanEstado.textContent = estadoSeleccionado.charAt(0).toUpperCase() + estadoSeleccionado.slice(1).replace('-', ' ');

                            // Actualizar el atributo de estado de la fila
                            fila.setAttribute('data-estado', estadoSeleccionado);
                        }
                    });

                    // Cerrar el modal y mostrar mensaje de éxito
                    cerrarModal(modalCambiarEstado);
                    mostrarExito('Estado Actualizado', `Se ha actualizado el estado de ${clientesSeleccionados.length} cliente(s).`);

                    // Resetear el estado seleccionado
                    estadoSeleccionado = null;
                    opcionesEstado.forEach(op => op.classList.remove('seleccionado'));
                } else {
                    alert('Error: ' + data.message);
                }
            })
            .catch(error => {
                // Manejo de errores inesperados
                console.error('Error al actualizar estado:', error);
                alert('Error inesperado al actualizar estado');
            });
    });


    btnCambiarEstado.addEventListener('click', () => {
        if (obtenerClientesSeleccionados().length === 0) {
            alert('Por favor, seleccione al menos un cliente');
            return;
        }
        abrirModal(modalCambiarEstado);
    });

    btnAgregar.addEventListener('click', () => abrirModal(modalAgregarCliente));
    cerrarModalEstado.addEventListener('click', () => cerrarModal(modalCambiarEstado));
    cerrarModalAgregar.addEventListener('click', () => cerrarModal(modalAgregarCliente));
    cerrarModalExito.addEventListener('click', () => cerrarModal(modalExito));
    btnCancelarAgregar.addEventListener('click', () => cerrarModal(modalAgregarCliente));
    modalOverlay.addEventListener('click', cerrarTodosLosModales);

    document.addEventListener('keydown', function (e) {
        if (e.key === 'Escape') cerrarTodosLosModales();
    });

    // Inicializar selección
    actualizarClientesSeleccionados();

    // Buscador de clientes
    document.getElementById('buscarCliente').addEventListener('input', filtrarClientes);
    document.getElementById('filtroClientes').addEventListener('change', filtrarClientes);
    document.getElementById('filtroClientesEstado').addEventListener('change', filtrarClientes);

    function filtrarClientes() {
        const textoBusqueda = document.getElementById('buscarCliente').value.toLowerCase();
        const filtro = document.getElementById('filtroClientes').value;
        const filtroEstado = document.getElementById('filtroClientesEstado').value.toLowerCase();
        document.querySelectorAll('.tabla-clientes tbody tr').forEach(fila => {
            const estadoCliente = fila.getAttribute('data-estado').toLowerCase();
            const coincideEstado = (filtroEstado === 'todos') || (estadoCliente === filtroEstado);
            if (!coincideEstado) {
                fila.style.display = 'none';
                return;
            }
            let mostrar = false;
            if (!filtro) {
                mostrar = fila.textContent.toLowerCase().includes(textoBusqueda);
            } else {
                const celda = fila.querySelector(`td[data-filtro="${filtro}"]`);
                if (celda) {
                    mostrar = celda.textContent.toLowerCase().includes(textoBusqueda);
                }
            }
            fila.style.display = mostrar ? '' : 'none';
        });
    }
};